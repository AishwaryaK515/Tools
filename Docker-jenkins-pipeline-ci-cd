CI-CD pipeline
we will push the code to the git-hub and from the github we will push the code through jenkinsand after pulling the code from the github we will test the code on sonarqube after scanning the code we will deploy using 
docker and everything will be done on ec2 iinstance
we 3 need 3 instance
1. for jenkins
2. for sonarqube
3 for docker deployment
after deploying we will execute in browser




📌 What is Docker?
Docker is a containerization platform that allows you to package applications and their dependencies into lightweight, portable containers.

✅ Why Use Docker?
✔ Works on Any OS – No dependency issues
✔ Lightweight – Uses fewer resources than VMs
✔ Scalable – Run multiple containers easily
✔ Faster Deployment – No need for re-installing dependencies

🔹 Step 1: Install Docker on Amazon Linux
1️⃣ Update System Packages
-  sudo yum update -y
 2️⃣ Install Docker
-  sudo yum install -y docker
3️⃣ Start & Enable Docker
-  sudo systemctl start docker
-  sudo systemctl enable docker
4️⃣ Verify Docker Installation
-  docker --version
5️⃣ Run a Test Container
-  docker run hello-world
✅ If you see "Hello from Docker!", your installation is successful! 🎉


🔹 Step 2: Understanding Docker Terminology
🛠️ Image vs. Container
Docker Image → A template with application code & dependencies. (Like an ISO file)
Docker Container → A running instance of an image. (Like a virtual machine)
🛠️ Docker Hub
A cloud repository where you can store and share Docker images.

✅ Example: Pull an image from Docker Hub
-  docker pull nginx
✅ List downloaded images
-  docker images


🔹 Step 3: Working with Containers
1️⃣ Run a Container in Foreground Mode
-  docker run ubuntu
🚀 Runs an Ubuntu container (but exits immediately because no command is running)
2️⃣ Run a Container in Interactive Mode
-  docker run -it ubuntu bash
✅ Now you are inside the container:
root@container-id:/#
Type exit to leave the container.
3️⃣ Run a Container in Detached Mode (Background)
- docker run -d nginx
✅ Check Running Containers
-  docker ps
✅ Stop a Running Container
-  docker stop <container_id>
✅ Remove a Stopped Container
-  docker rm <container_id>


🔹 Step 4: Exposing a Web Application in a Container
Let's run a web server inside a Docker container.
-  docker run -d -p 8080:80 nginx
-d → Runs container in detached mode
-p 8080:80 → Maps port 80 inside the container to port 8080 on the host
✅ Test in Browser:
-  docker stop <container_id>

🔹 Step 5: Managing Docker Containers & Images
✅ View Running Containers     -  docker ps
✅ View All Containers (Including Stopped)      -  docker ps -a
✅ Check Container Logs                         -  docker logs <container_id>
✅ Remove an Image                              -  docker rmi nginx
✅ Remove All Stopped Containers                -  docker container prune -f
✅ Remove Unused Docker Images                  -  docker image prune -a -f
✅ Remove All Docker Resources (Images, Containers, Networks, Volume      -  docker system prune -a -f
















# **🚀 Building Custom Docker Images (Amazon Linux Edition)**  

Now that we understand **Docker basics**, let's **build our own Docker image** from scratch!  

✅ **What Will We Do?**  
1️⃣ Create a simple **Java application**  
2️⃣ Write a **Dockerfile** to containerize it  
3️⃣ Build a custom **Docker image**  
4️⃣ Run a container from our image  

---

# **🔹 Step 1: Create a Sample Java Application**
We'll create a simple **Java application** that prints **"Hello, Docker!"**.  

### **1️⃣ Navigate to Your Project Directory**
```bash
mkdir myapp && cd myapp
```

### **2️⃣ Create a Java File**
```bash
nano App.java
```

### **3️⃣ Write the Java Code**
```java
public class App {
    public static void main(String[] args) {
        System.out.println("Hello, Docker!");
    }
}
```
📌 **Save and exit (`CTRL + X`, then `Y`, then `Enter`).**  

---

# **🔹 Step 2: Compile the Java Application**
Before creating a Docker image, let's **compile the Java file**.

```bash
javac App.java
```
This generates `App.class`, which is the compiled Java program.

---

# **🔹 Step 3: Create a Dockerfile**
A **Dockerfile** tells Docker how to build an image.

### **1️⃣ Create a New Dockerfile**
```bash
nano Dockerfile
```

### **2️⃣ Write the Dockerfile**
```dockerfile
# Use Amazon Corretto 17 as the base image
FROM amazoncorretto:17

# Set the working directory inside the container
WORKDIR /app

# Copy compiled Java class into the container
COPY App.class .

# Command to run the application
CMD ["java", "App"]
```
📌 **Save and exit (`CTRL + X`, then `Y`, then `Enter`).**  

---

# **🔹 Step 4: Build the Docker Image**
Now that our **Dockerfile** is ready, let's build the image.

```bash
docker build -t my-java-app .
```
✅ **Expected Output:**
```
Successfully built <IMAGE_ID>
Successfully tagged my-java-app:latest
```

### **Verify the Image**
```bash
docker images | grep my-java-app
```
✅ **Output Example:**
```
my-java-app   latest   123456789abc   5 minutes ago   300MB
```

---

# **🔹 Step 5: Run a Container from Our Image**
```bash
docker run my-java-app
```
✅ **Output:**  
```
Hello, Docker!
```
🎉 **Congratulations! Your Java app is running inside a Docker container!**  

---

# **🔹 Step 6: Tag & Push to Docker Hub**
Now that we have our image, let’s push it to **Docker Hub**.

### **1️⃣ Log in to Docker Hub**
```bash
docker login
```
Enter your **Docker Hub username** and **password**.

### **2️⃣ Tag the Image**
```bash
docker tag my-java-app aishwaryak2601/my-java-app:latest
```

### **3️⃣ Push the Image to Docker Hub**
```bash
docker push aishwaryak2601/my-java-app:latest
```
✅ **Now your image is available on Docker Hub!** 🎉  

---

# **🔹 Step 7: Run Your Dockerized App on Any Server**
Now that the image is on **Docker Hub**, you can **run it on any machine**.

### **On a New Server**
```bash
docker pull aishwaryak2601/my-java-app:latest
docker run aishwaryak2601/my-java-app:latest
```
✅ **Your application is running inside a container!** 🚀  

---

# **✅ Summary**
✔ Created a **Java application**  
✔ Wrote a **Dockerfile**  
✔ **Built & ran** a custom Docker image  
✔ **Pushed the image** to Docker Hub  
✔ Pulled & ran the image on another machine  

---












# **🚀 Automating Docker Build & Push with Jenkins CI/CD (Amazon Linux)**  

Now that we've successfully built and pushed a **custom Docker image**, let's **automate** this process using **Jenkins**.  

✅ **What Will We Do?**  
1️⃣ Modify the **Jenkinsfile** to include Docker build & push  
2️⃣ Store **Docker Hub credentials** in Jenkins  
3️⃣ Run the pipeline to **automate CI/CD**  

---

## **🔹 Step 1: Update Jenkinsfile for Docker Automation**
Modify your **Jenkinsfile** to:  
- **Clone the repository**  
- **Build the Java application**  
- **Build a Docker image**  
- **Push it to Docker Hub**  

### **🛠 Update Your `Jenkinsfile`**
```groovy
pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "aishwaryak2601/my-java-app:latest"
    }

    tools {
        maven 'maven'   // Ensure Maven is installed in Jenkins Global Tool Configuration
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/AishwaryaK515/new-repo.git'
            }
        }

        stage('Build & Test') {
            steps {
                sh 'mvn clean package'
                sh 'mvn test'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the application...'
            }
        }
    }  // Closing brace for 'stages'

    post {
        success {
            echo "🚀 Deployment Successful!"
        }
        failure {
            echo "❌ Deployment Failed!"
        }
    }
}  // Closing brace for 'pipeline'

```
✅ **What This Jenkinsfile Does:**  
✔ **Clones the repository**  
✔ **Builds & tests the Java project**  
✔ **Builds a Docker image**  
✔ **Pushes the image to Docker Hub**  

📌 **Now, let’s store Docker credentials in Jenkins.**  

---

## **🔹 Step 2: Add Docker Hub Credentials to Jenkins**
Since Jenkins needs **authentication** to push images, we must **store Docker Hub credentials** in Jenkins.

### **1️⃣ Add Credentials in Jenkins**
1. **Go to Jenkins Dashboard → Manage Jenkins → Manage Credentials**  
2. **Select "Global Credentials (unrestricted)"**  
3. Click **"Add Credentials"**  
4. **Choose "Username & Password"**  
   - **Username:** Your **Docker Hub username**  
   - **Password:** Your **Docker Hub password**  
   - **ID:** `docker-hub-credentials` (must match the Jenkinsfile)  
5. Click **OK**  

✅ **Now, Jenkins can push Docker images securely!**  

---

## **🔹 Step 3: Run the Jenkins Pipeline**
### **1️⃣ Go to Jenkins Dashboard → Your Pipeline Job**
### **2️⃣ Click "Build Now"**
### **3️⃣ Monitor the Console Output**
✅ **You should see:**
- ✅ Clone the repo  
- ✅ Build & test the Java project  
- ✅ Build a Docker image  
- ✅ Push the image to Docker Hub  

---

## **🔹 Step 4: Deploy & Run Your Dockerized Application**
Now that Jenkins **automates CI/CD**, you can **run your application anywhere**.

### **On a New Server**
```bash
docker pull yourdockerhubuser/my-java-app:latest
docker run -d -p 8080:8080 yourdockerhubuser/my-java-app:latest
```
✅ **Now your app is running inside a Docker container!** 🚀  

---

# **✅ Summary**
✔ Updated Jenkinsfile to **automate Docker build & push**  
✔ Stored **Docker Hub credentials** securely in Jenkins  
✔ Ran a **Jenkins CI/CD pipeline** to automate everything  
✔ Pulled & deployed the Docker image anywhere  

---




















































